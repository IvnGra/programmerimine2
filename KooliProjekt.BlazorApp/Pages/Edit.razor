@page "/create"
@page "/edit/{Id:int}"

@using System.ComponentModel.DataAnnotations
@using PublicApi.Api
@inject IApiClient apiClient
@inject NavigationManager NavManager

<h3>@title User</h3>

@if (!string.IsNullOrEmpty(debugInfo))
{
    <div class="alert alert-info">
        <h5>Debug Info (remove after checking):</h5>
        <pre>@debugInfo</pre>
    </div>
}

<EditForm EditContext="@editContext" OnValidSubmit="@FormSubmitted">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="name" class="col-sm-2 col-form-label">Username</label>
        <div class="col-sm-10">
            <InputText id="name" class="form-control" placeholder="Name" @bind-Value="user.Username" />
            <ValidationMessage For="@(() => user.Username)" />
        </div>
    </div>

    <div class="form-group row mt-3">
        <div class="col-sm-10 offset-sm-2">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private User user = new User();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private string title = "Edit";
    private string debugInfo = "";

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(user);
        messageStore = new ValidationMessageStore(editContext);

        if (Id == 0)
        {
            title = "Add";
            return;
        }

        try
        {
            var apiResult = await apiClient.Get(Id);

            if (apiResult.HasErrors)
            {
                AddValidationErrors(apiResult.Errors ?? new Dictionary<string, List<string>> {
                    { "General", new List<string> { "Unknown error while loading user" } }
                });
                return;
            }

            user = apiResult.Value ?? new User();
            editContext = new EditContext(user);
            messageStore = new ValidationMessageStore(editContext);

            var props = apiResult.Value?.GetType().GetProperties()
                .Select(p => $"{p.Name}: {p.PropertyType.Name}")
                .ToArray() ?? Array.Empty<string>();
            debugInfo = "User properties:\n" + string.Join("\n", props);
        }
        catch (Exception ex)
        {
            debugInfo += $"\nException: {ex.Message}";
        }
    }

    private async Task FormSubmitted()
    {
        try
        {
            var apiResult = await apiClient.Save(user);

            if (apiResult.HasErrors)
            {
                AddValidationErrors(apiResult.Errors ?? new Dictionary<string, List<string>> {
                    { "General", new List<string> { "Unknown error while saving user" } }
                });
                return;
            }

            NavManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            debugInfo += $"\nSave Exception: {ex.Message}";
        }
    }

    private void AddValidationErrors(Dictionary<string, List<string>> errors)
    {
        if (errors == null || !errors.Any())
            return;

        foreach (var error in errors)
        {
            var fieldId = new FieldIdentifier(user, error.Key == "General" ? nameof(user.Username) : error.Key);
            foreach (var message in error.Value)
            {
                messageStore?.Add(fieldId, message);
            }
        }
        editContext?.NotifyValidationStateChanged();
    }
}
